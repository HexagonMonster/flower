var UIElement = (function (_super) {

    __extends(UIElement, _super);

    function UIElement(xml, namespaces) {
        _super.call(this);

        this.xml = xml;
        this.elements = [];
        this.attributesElements = [];
        this.attributes = {};
        this.namespaces = namespaces || xml.namespaces;
    }

    UIElement.prototype.updateX = function (x) {
    }

    UIElement.prototype.load = function () {
        var isContainer = false;
        var xml = this.xml;
        var name = xml.name;
        var xmlNS = name.split(":")[0];
        var name = name.split(":")[1];
        this.xmlNS = xmlNS;
        this.className = name;
        var display = new this.clazz();
        this.__isDisplay = display instanceof flower.DisplayObject;
        this.__isContainer = display instanceof flower.Sprite;
        this.__isUIComponent = display.__UIComponent ? true : false;
        if (this.isDisplay) {
            var names = ["x", "y", "width", "height", "rotation", "scaleX", "scaleY"];
            var inits = [0, 0, 0, 0, 0, 1, 1];
            for (var i = 0; i < names.length; i++) {
                var attribute = xml.getAttribute(names[i]);
                if (attribute) {
                    this.attributes[names[i]] = new flower.NumberValue(attribute.value);
                } else {
                    this.attributes[names[i]] = new flower.NumberValue(inits[i]);
                    this.attributes[names[i]].exist = false;
                }
            }
            for (var i = 0; i < xml.attributes.length; i++) {
                var attribute = xml.attributes[i];
                var find = false;
                for (var f = 0; f < names.length; f++) {
                    if (names[f] == attribute.name) {
                        find = true;
                        break;
                    }
                }
                if (!find) {
                    this.attributes[attribute.name] = new flower.StringValue(attribute.value);
                }
            }
            for (var i = 0; i < xml.elements.length; i++) {
                var childXML = xml.elements[i];
                var childName = childXML.name;
                var childNameNS = childName.split(":")[1];
                childName = childName.split(":")[0];
                if (childName == "f" && (childName.charAt(0) < 48 || childName.charAt(0) > 57)) {
                    this.attributesElements.push(new UIElement(childXML, this.namespaces));
                } else {
                    this.elements.push(new UIElement(childXML, this.namespaces));
                }
            }
            this.loadIndex = this.attributesElements.length + this.elements.length;
            if (!this.loadIndex) {
                new flower.CallLater(this.dispatchWidth, this, [flower.Event.COMPLETE]);
            } else {
                for (var i = 0; i < this.attributesElements.length; i++) {
                    this.attributesElements[i].load();
                    this.attributesElements[i].addListener(flower.Event.COMPLETE, this.__onLoad, this);
                    this.attributesElements[i].addListener(flower.Event.ERROR, this.__onLoadError, this);
                }
                for (var i = 0; i < this.elements.length; i++) {
                    this.elements[i].load();
                    this.elements[i].addListener(flower.Event.COMPLETE, this.__onLoad, this);
                    this.elements[i].addListener(flower.Event.ERROR, this.__onLoadError, this);
                }
            }
        } else {
            new flower.CallLater(this.dispatchWidth, this, [flower.Event.COMPLETE]);
        }
    }

    UIElement.prototype.__onLoad = function (e) {
        this.dispatch(e);
    }

    UIElement.prototype.__onLoadError = function (e) {
        this.dispatch(e);
    }

    UIElement.prototype.getElementAt = function (index) {
        return this.elements[index];
    }

    UIElement.prototype.getAttribute = function (name) {
        return this.attributes[name];
    }

    UIElement.prototype.getAttributeValue = function (name) {
        var val = this.attributes[name];
        if (val && val instanceof flower.Value) {
            val = val.value;
            if (flower.StringDo.isNumberString(val)) {
                val = +val || 0;
            }
        }
        return val;
    }

    UIElement.prototype.getAttributeElementAt = function (index) {
        return this.attributesElements[index];
    }

    Object.defineProperty(UIElement.prototype, "clazz", {
        get: function () {
            if (this.xmlNS == "f") {
                return root.flower[this.className];
            }
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(UIElement.prototype, "numElement", {
        get: function () {
            return this.elements.length;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(UIElement.prototype, "numAttributeElement", {
        get: function () {
            return this.attributesElements.length;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(UIElement.prototype, "isDisplay", {
        get: function () {
            return this.__isDisplay;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(UIElement.prototype, "isContainer", {
        get: function () {
            return this.__isContainer;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(UIElement.prototype, "isUIComponent", {
        get: function () {
            return this.__isUIComponent;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });

    return UIElement;

})(flower.EventDispatcher);


module.UIElement = UIElement;