function init() {
    this.tree.clickItem = this.onClickItem.bind(this);
    this.loadPlugins();
    ProjectView.instance = this;
}

function loadPlugins() {
    this.path = "flower.json";
    var loader = new flower.URLLoader(editor.path + "plugins/Plugin.json");
    loader.addListener(flower.Event.COMPLETE, this.__onLoadPlugins, this);
    loader.load();
}

function __onLoadPlugins(e) {
    var list = e.data;
    this.progress = flower.DataManager.getInstance().createData("ProgressData");
    this.progress.max.value = list.length;
    this.progress.tip.value = "加载插件";
    software.Loading.show(this.progress);
    this.__loadNextPlugin(0, list);
}

function __loadNextPlugin(index, list) {
    this.progress.current.value = index;
    if (index == list.length) {
        software.Loading.hide();
        this.loadPorject(this.path);
    } else {
        var script = "";
        script += "var registerParser = editor.PluginManager.registerParser;\n";
        script += "var registerView = editor.PluginManager.registerView;\n";
        script += "var setNewFilePanel = editor.PluginManager.setNewFilePanel;\n";
        script += "var addFile = editor.ProjectView.addFile;\n";
        script += "var saveFile = editor.ProjectView.saveFile;\n";
        var module = new flower.Module(editor.path + "plugins/" + list[index], script);
        module.addListener(flower.Event.COMPLETE, function (e) {
            index++;
            this.__loadNextPlugin(index, list);
        }, this);
        module.progress.percent.addListener(flower.Event.UPDATE, function (e) {
            this.progress.current.value = index + e.data.value;
        }, this);
        module.load();
    }
}

function loadPorject(url) {
    var loader = new flower.URLLoader(url);
    loader.addListener(flower.Event.COMPLETE, this.__onLoadConfig, this);
    loader.load();
}

function __onLoadConfig(e) {
    var cfg = this.config = e.data;
    this.plugins = {};
    this.title = cfg.name;
    var direction = this.tree.data.direction;
    direction.removeAll();
    for (var key in cfg.direction) {
        var item = cfg.direction[key];
        var menu = null;
        var path = "res/" + key;
        var file = new editor.File(true, path, item.name);
        if (item.plugin) {
            this.plugins[item.plugin] = item;
            var list = [];
            if (editor.PluginManager.getNewFilePanel(item.plugin)) {
                list.push({"label": "新建" + item.name, "type": "addFile"});
            }
            if (list.length) {
                menu = {
                    "menu": list,
                    "target": {
                        "path": path,
                        "pluginName": item.plugin
                    },
                    "click": function (info, item) {
                        if (item.type == "addFile") {
                            var clazz = editor.PluginManager.getNewFilePanel(info.pluginName);
                            flower.PopManager.pop(new clazz(info), true, true);
                            console.log("AddFile:" + info.path);
                        }
                    }
                };
            }
        }
        file.menu = menu;
        direction.push(file);
        var list = item.list;
        var pluginName = item.plugin;
        for (var i = 0; i < list.length; i++) {
            path = list[i];
            direction.push(new editor.File(false, path, flower.Path.getName(path), pluginName));
        }
    }
    this.openItem("res/dungeon/Level1.json");
    //this.openItem("res/module/MainUI.xml");
}

function saveDirection() {
    (new flower.File(this.path)).saveText(JSON.stringify(this.config));
}

function openItem(url) {
    var direction = this.tree.data.direction;
    var item;
    for (var i = 0; i < direction.length; i++) {
        if (direction.getItemAt(i).path == url) {
            item = direction.getItemAt(i);
            break;
        }
    }
    if (item) {
        item.openFile();
    }
}

function onClickItem(e) {
    var item = e.item;
    if (item.isDirection == true) {

    } else {
        this.openItem(item.path);
    }

    //console.log(e);
    //var item = e.item;
    //if (item.plugin) {
    //    this.openItem(item.path);
    //    //item.openFile();
    //}
}

function addFile(path, pluginName) {
    var direction = this.tree.data.direction;
    direction.push(new editor.File(false, path, flower.Path.getName(path), pluginName));
    this.plugins[pluginName].list.push(path);
    this.saveDirection();
}

function saveFile(path,content,back,thisObj,type) {
    if(type == null) {
        (new flower.File(path)).saveText(content,back,thisObj);
    } else if(type == "png") {
        (new flower.File(path)).savePNG(content,back,thisObj);
    }
}

static function addFile(path,pluginName) {
    ProjectView.instance.addFile(path,pluginName);
}

static function saveFile(path,content,back,thisObj,type) {
    ProjectView.instance.saveFile(path,content,back,thisObj,type);
}