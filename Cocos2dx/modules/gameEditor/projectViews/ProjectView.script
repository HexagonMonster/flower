function init() {
    this.tree.clickItem = this.onClickItem.bind(this);
    this.loadPlugins();
}

function loadPlugins() {
    var loader = new flower.URLLoader(editor.path + "plugins/Plugin.json");
    loader.addListener(flower.Event.COMPLETE, this.__onLoadPlugins, this);
    loader.load();
}

function __onLoadPlugins(e) {
    var list = e.data;
    this.progress = flower.DataManager.getInstance().createData("ProgressData");
    this.progress.max.value = list.length;
    this.progress.tip.value = "加载插件";
    software.Loading.show(this.progress);
    this.__loadNextPlugin(0, list);
}

function __loadNextPlugin(index, list) {
    this.progress.current.value = index;
    if (index == list.length) {
        software.Loading.hide();
        this.loadPorject("flower.json");
    } else {
        var script = "";
        script += "var registerParser = editor.PluginManager.registerParser;\n";
        script += "var registerView = editor.PluginManager.registerView;\n";
        var module = new flower.Module(editor.path + "plugins/" + list[index],script);
        module.addListener(flower.Event.COMPLETE, function (e) {
            index++;
            this.__loadNextPlugin(index, list);
        }, this);
        module.progress.percent.addListener(flower.Event.UPDATE, function (e) {
            this.progress.current.value = index + e.data.value;
        }, this);
        module.load();
    }
}

function loadPorject(url) {
    var loader = new flower.URLLoader(url);
    loader.addListener(flower.Event.COMPLETE, this.__onLoadConfig, this);
    loader.load();
}

function __onLoadConfig(e) {
    var cfg = this.config = e.data;
    this.title = cfg.name;
    var direction = this.tree.data.direction;
    direction.removeAll();
    for (var key in cfg.direction) {
        direction.push(new editor.File(true, "res/" + key, cfg.direction[key].name));
        var list = cfg.direction[key].list;
        for (var i = 0; i < list.length; i++) {
            var item = list[i];
            direction.push(new editor.File(false, item.path, flower.Path.getName(item.path), item.type));
        }
    }
    //this.openItem("res/dungeon/Level1.json");
    this.openItem("res/module/MainUI.xml");
}

function openItem(url) {
    var direction = this.tree.data.direction;
    var item;
    for (var i = 0; i < direction.length; i++) {
        if (direction.getItemAt(i).path == url) {
            item = direction.getItemAt(i);
            break;
        }
    }
    if (item) {
        item.openFile();
    }
}

function onClickItem(e) {
    this.openItem(e.item.path);
    //console.log(e);
    //var item = e.item;
    //if (item.plugin) {
    //    this.openItem(item.path);
    //    //item.openFile();
    //}
}