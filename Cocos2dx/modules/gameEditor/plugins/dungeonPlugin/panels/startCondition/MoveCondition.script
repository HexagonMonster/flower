function init() {
    this.list.dataProvider = new flower.ArrayValue();
    this.scrollerList.rightClick = function () {
        flower.MenuManager.showMenu(new software.Menu(
            {
                "menu": [
                    {
                        "label": "添加坐标点",
                        "type": "addPoint"
                    },
                    {
                        "label": "删除全部点",
                        "type": "removeAll"
                    }
                ],
                "click": this.menuFunction.bind(this)
            }
        ));
    }.bind(this);
}

function menuFunction(target, item) {
    if (item.type == "addPoint") {
        var array = this.list.dataProvider;
        var point = flower.DataManager.createData("Point");
        var data = {
            "point": point,
        }
        data.menu = {
            "target": data,
            "menu": [
                {
                    "label": "删除",
                    "type": "delPoint"
                },
                {
                    "label": "添加坐标点",
                    "type": "addPoint"
                },
                {
                    "label": "删除全部点",
                    "type": "removeAll"
                }
            ],
            "click": this.menuFunction.bind(this)
        }
        point.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        point.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        array.push(data);
        this.data.points.push(point);
    } else if (item.type == "removeAll") {
        this.list.dataProvider.removeAll();
        this.data.points.removeAll();
    } else if (item.type == "delPoint") {
        this.list.dataProvider.removeItem(target);
        this.data.points.removeItem(target.point);
    }
    this.save();
}

function setData(val) {
    _super.prototype.setData.call(this, val);
    this.list.dataProvider.removeAll();
    for (var i = 0; i < this.data.points.length; i++) {
        var point = this.data.points[i];
        var data = {
            "point": point
        }
        data.menu = {
            "target": data,
            "menu": [
                {
                    "label": "删除",
                    "type": "del"
                },
                {
                    "label": "添加坐标点",
                    "type": "addPoint"
                },
                {
                    "label": "删除全部点",
                    "type": "removeAll"
                }
            ],
            "click": this.menuFunction.bind(this)
        }
        point.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        point.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        this.list.dataProvider.push(data);
    }
    var atrs = ["armyType"];
    var dropDownList = {
        "armyType": [
            {
                "label": "己方部队",
                "type": 0
            },
            {
                "label": "怪物",
                "type": 1
            }
        ]
    }
    for (var i = 0; i < atrs.length; i++) {
        var atr = atrs[i];
        (function (atr) {
            if (dropDownList[atr]) {
                this[atr + "Combox"].dataProvider = new flower.ArrayValue(dropDownList[atr]);
                this[atr + "Combox"].value = this.data[atr];
                this.data[atr].addListener(flower.Event.UPDATE, function (e) {
                    this.save();
                }, this);
            } else {
                this[atr + "Input"].bindProperty("text", "{data." + atr + "}", [this]);
                this[atr + "Input"].addListener(flower.Event.FOCUS_IN, function (e) {
                    this[atr + "Input"].removeBindProperty("text");
                }.bind(this));
                var inputOver = function () {
                    var text = this[atr + "Input"].text;
                    if (text != "") {
                        this.data[atr].value = text;
                    } else {
                        this.data[atr].value = text;
                    }
                    this[atr + "Input"].bindProperty("text", "{data." + atr + "}", [this]);
                    this.__save();
                };
                this[atr + "Input"].addListener(flower.Event.FOCUS_OUT, function (e) {
                    inputOver.apply(this);
                }.bind(this));
                this[atr + "Input"].addListener(flower.KeyboardEvent.KEY_DOWN, function (e) {
                    if (e.keyCode != 13) return;
                    this[atr + "Input"].inputOver();
                    inputOver.apply(this);
                }.bind(this));
            }
        }.bind(this))(atr);
    }
}

function set save(func) {
    this.__save = func;
}

function get save() {
    return this.__save;
}