function init() {
    var container = this.container;
    var labels = ["名称","延迟(ms)", "类型"];
    var attributes = ["name","delay", "type"];
    var inputFalse = {
        //"itemId": true
    };

    var dropDownList = {
        "type": [
            {
                "label": "刷怪",
                "type": 1
            },
            {
                "label": "直接伤害",
                "type": 2
            },
            {
                "label": "buff",
                "type": 3
            },
            {
                "label": "开关触发器",
                "type": 4
            },
            {
                "label": "副本通关",
                "type": 5
            },
            {
                "label": "通关失败",
                "type": 6
            },
            {
                "label": "完成任务",
                "type": 7
            },
            {
                "label": "镜头移动",
                "type": 9
            },
            {
                "label": "锁定视野",
                "type": 10
            },
            {
                "label": "剧情对话",
                "type": 11
            }
        ]
    };
    this.attributes = attributes;
    for (var i = 0; i < attributes.length; i++) {
        var atr1 = attributes[i];
        var label1 = labels[i];
        var fxml =
            '<f:Group horizontalCenter="0" xmlns:f="flower" xmlns:s="software">' +
            '<f:Label horizontalCenter="-55" width="60" text="' + label1 + '" verticalCenter="0"/>';
        if (dropDownList[atr1]) {
            fxml += '<s:ComboBox id="' + atr1 + 'ComboBox" horizontalCenter="30" width="100" verticalCenter="0"/>';
        } else {
            fxml += '<f:Input id="' + atr1 + 'Input" horizontalCenter="30" width="100" verticalCenter="0" ' + (inputFalse[atr1] ? 'touchEnabled="false"' : '') + '/>';
        }
        fxml += '</f:Group>';
        var ui = (new flower.UIParser()).parseUI(fxml);
        container.addChild(ui);
        if (dropDownList[atr1]) {
            ui[atr1 + "ComboBox"].dataProvider = new flower.ArrayValue(dropDownList[atr1]);
            this[atr1 + "ComboBox"] = ui[atr1 + "ComboBox"];
        } else {
            this[atr1 + "Input"] = ui[atr1 + "Input"];
        }
    }
}

function set save(func) {
    this.__save = func;
}

function get save() {
    return this.__save;
}

function setData(val) {
    _super.prototype.setData.call(this, val);
    var attributes = this.attributes;
    for (var i = 0; i < attributes.length; i++) {
        var atr = attributes[i];
        (function (atr) {
            if (this[atr + "Input"]) {
                this[atr + "Input"].bindProperty("text", "{data." + atr + "}", [this]);
                this[atr + "Input"].addListener(flower.Event.FOCUS_IN, function (e) {
                    this[atr + "Input"].removeBindProperty("text");
                }.bind(this));
                var inputOver = function () {
                    var text = this[atr + "Input"].text;
                    if (text != "") {
                        this.data[atr].value = text;
                    } else {
                        this.data[atr].value = text;
                    }
                    this[atr + "Input"].bindProperty("text", "{data." + atr + "}", [this]);
                    this.__save();
                };
                this[atr + "Input"].addListener(flower.Event.FOCUS_OUT, function (e) {
                    inputOver.apply(this);
                }.bind(this));
                this[atr + "Input"].addListener(flower.KeyboardEvent.KEY_DOWN, function (e) {
                    if (e.keyCode != 13) return;
                    this[atr + "Input"].inputOver();
                    inputOver.apply(this);
                }.bind(this));
            } else if (this[atr + "ComboBox"]) {
                this[atr + "ComboBox"].value = this.data[atr];
                this.data[atr].addListener(flower.Event.UPDATE, function (e) {
                    this.save();
                }, this);
            }
        }).bind(this)(atr);
    }
}