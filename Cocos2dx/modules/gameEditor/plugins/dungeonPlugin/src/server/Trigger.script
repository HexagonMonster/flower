var Trigger = (function () {

    function Trigger(data, dungeonData, callObject, triggerRunning) {
        this.data = data;
        this.dungeonData = dungeonData;
        this.callObject = callObject;
        this.triggerRunning = triggerRunning;

        this.data.hasPlay.value = true;
        this.time = 0;
        this.update(0);
    }

    Trigger.prototype.update = function (dt) {
        this.time += dt;
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (!effect.hasPlay.value && effect.delay.value <= this.time) {
                this.runEffect(effect);
            }
        }
    }

    Trigger.prototype.runEffect = function (effect) {
        effect.hasPlay.value = true;
        var value = effect.effectValue;
        switch (effect.type.value) {
            case 1:
                for (var i = 0; i < value.monsters.length; i++) {
                    var monster = value.monsters[i];
                    this.triggerRunning.addMonster(monster);
                }
                break;
            case 4:
                this.triggerRunning.runTrigger(value.operate.value, value.triggerId.value);
                break;
            case 9:
                this.callObject.cameraTweenTo(value.time.value, value.coord.x.value, value.coord.y.value, value.pos.value);
                break;
            case 10:
                this.callObject.setCameraRange(value.rect.x.value, value.rect.y.value, value.rect.width.value, value.rect.height.value);
                break;
            case 12:
                this.triggerRunning.gameStart();
                this.callObject.startGame();
                break;
        }
    }

    Trigger.prototype.dispose = function () {
        this.data.hasPlay.value = false;
        for (var i = 0; i < this.data.effects.length; i++) {
            this.data.effects[i].hasPlay.value = false;
        }
    }

    return Trigger;
})();


module.Trigger = Trigger;