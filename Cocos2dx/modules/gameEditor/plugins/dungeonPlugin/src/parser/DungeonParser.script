var DungeonParser = (function (_super) {

    __extends(DungeonParser, _super);

    function DungeonParser(file) {
        _super.call(this, file);
    }

    DungeonParser.prototype.load = function () {
        var config = this.file.content;
        this.data = flower.DataManager.createData("dg.DungeonData", config);
        this.data.backgroundList.addListener(flower.Event.SELECTED_ITEM_CHANGE, function (e) {
            if(e.data) {
                this.data.background.value = e.data.path;
                this.save();
            }
        }, this);
        (new flower.Direction("res/tools/dungeon/background")).readDirectionList(function (list) {
            this.data.backgroundList.removeAll();
            for (var i = 0; i < list.length; i++) {
                if (list[i].fileType == "jpg" || list[i].fileType == "png") {
                    this.data.backgroundList.push({
                        label: list[i].name,
                        path: list[i].path
                    });
                }
            }
        }, this);
        return false;
    }

    DungeonParser.prototype.onLoadComplete = function (e) {
        this.dispatch(e);
    }

    DungeonParser.prototype.onLoadError = function (e) {
        this.dispatch(e);
    }

    DungeonParser.prototype.save = function () {
        var path = this.file.path;
        (new flower.File(path)).saveText(flower.ObjectDo.toString(this.data.value));
    }

    Object.defineProperty(DungeonParser.prototype, "itemId", {
        get: function () {
            return this.config.itemId++;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });


    return DungeonParser;

})(editor.Parser);

module.DungeonParser = DungeonParser;
registerParser("Dungeon", DungeonParser);