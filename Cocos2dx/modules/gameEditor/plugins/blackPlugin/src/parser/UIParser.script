var UIParser = (function (_super) {

    __extends(UIParser, _super);

    function UIParser(xml, uiFile) {
        _super.call(this);
        this.xml = xml;
        this.data = flower.DataManager.createData("ue.UI");
        this.data.file = uiFile;
        this.uiFile = uiFile;
    }

    UIParser.prototype.load = function () {
        //分析属性
        for (var i = 0; i < this.xml.attributes.length; i++) {
            var attribute = this.xml.attributes[i];
            var attributeValue = flower.DataManager.createData("ue.Attribute");
            attributeValue.name = attribute.name;
            attributeValue.content = attribute.value;
            this.data.attributes.push(attributeValue);
            //if (display.hasMember(attribute.name)) {
            //    display[attribute.name].value = attribute.value;
            //}
        }
        //分析子属性
        for (var i = 0; i < this.xml.elements.length; i++) {
            var element = this.xml.elements[i];
            var namespace = element.name.split(":")[0];
            var name = element.name.split(":")[1];
            var child = flower.DataManager.createData("ue.Child");
            if (namespace == "f" && name == "script") {
                child.type = 3;
                var script = flower.DataManager.createData("ue.script");
                script.src = element.getAttribute("src") ? element.getAttribute("src").value : "";
                child.content = script;
            } else if (namespace == "f" && name.charCodeAt(0) >= "a".charCodeAt(0) && name.charCodeAt(0) <= "z".charCodeAt(0)) { //属性
                child.type = 2;
                child.content = element;
            } else {
                child.type = 1;
                var data = flower.DataManager.createData("ue.UI");
                var ui = new UIParser(element, this.uiFile);
                ui.addListener(flower.Event.COMPLETE, this.loadUIComplete, this);
                ui.load();
                child.content = data;
            }
            this.data.children.push(child);
        }
        this.loadUIComplete();
    }

    UIParser.prototype.loadUIComplete = function () {
        //for (var i = 0; i < this.data.attributes; i++) {
        //    if (this.data.attributes[i] instanceof black.UIParser && !this.data.attributes[i].isReady) {
        //        return;
        //    }
        //}
        //for (var i = 0; i < this.data.children.length; i++) {
        //    if (!this.data.children[i].isReady) {
        //        return;
        //    }
        //}
        //this.data.isReady = true;
        new flower.CallLater(this.dispatchWith, this, [flower.Event.COMPLETE]);
    }

    //Object.defineProperty(UIParser.prototype, "itemId", {
    //    get: function () {
    //        this.data.itemId.value = this.data.itemId.value + 1;
    //        return this.data.itemId.value;
    //    },
    //    set: function (val) {
    //    },
    //    enumerable: true,
    //    configurable: true
    //});


    return UIParser;

})(flower.EventDispatcher);

module.UIParser = UIParser;