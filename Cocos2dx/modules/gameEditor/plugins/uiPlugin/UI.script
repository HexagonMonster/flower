var UI = (function (_super) {

    __extends(UI, _super);

    function UI(data, info) {
        _super.call(this);
        this.data = data;
        this.info = info;
        this.focusEnabeld = true;
        this.addListener(flower.Event.ADDED, this.onAdded, this);
    }

    UI.prototype.onAdded = function (e) {
        this.removeListener(flower.Event.ADDED, this.onAdded, this);
        this.init();
    }

    UI.prototype.init = function () {
        var data = this.data;
        this.display = new data.clazz();
        this.addChild(this.display);
        if (!data.isContainer) {
            this.percentWidth = 100;
            this.percentHeight = 100;
        }
        this.editor = new editor.UIEditor(this.data, this.display);
        var atrs = ["x", "y", "width", "height", "scaleX", "scaleY", "rotation", "left", "right", "top", "bottom"];
        for (var i = 0; i < atrs.length; i++) {
            var atr = data.getAttribute(atrs[i]);
            if (!atr || atr.exist == false) continue;
            var display;
            if (data.isContainer) {
                display = this;
            } else {
                display = this.display;
            }
            if (atr instanceof flower.Value) {
                display[atrs[i]] = atr.value;
                var _this = new function (display, name) {
                    this.display = display;
                    this.name = name;
                    return this;
                }(display, atrs[i]);
                atr.addListener(flower.Event.CHANGE, function (e) {
                    this.display[this.name] = e.data;
                }.bind(_this));
            } else {
                display[atrs[i]] = atr;
            }
        }
        flower.breakPoint();
        for (var i = 0; i < data.numElement; i++) {
            var childData = data.getElementAt(i);
            console.log("childData", childData);
            if (childData.isDisplay) {
                var child = new UI(childData, this.info);
                this.addChild(child);
            }
        }
        this.addChild(this.editor);
        this.display.addListener(flower.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
        this.editor.addListener(flower.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
    }

    UI.prototype.onTouchBegin = function (e) {
        if (e.currentTarget == this.display) {
            this.display.startDrag();
            EnterFrame.add(this.dragUpdate, this);
        }
        if (this.info.select == this) {
            return;
        }
        if (this.info.select) {
            this.info.select.unselected();
        }
        this.info.select = this;
        this.info.select.selected();
        editor.EventManager.instance.dispatchWidth(editor.ModuleEvent.SELECT_ELEMENT, this.data);
    }

    UI.prototype.dragUpdate = function (gap, time) {
        //this.data.
    }

    UI.prototype.selected = function () {
        this.editor.show();
    }

    UI.prototype.unselected = function () {
        this.editor.hide();
    }

    UI.prototype.dispose = function () {
        this.editor.dispose();
        _super.dispose.call(this);
    }

    return UI;

})(flower.Group);

module.UI = UI;